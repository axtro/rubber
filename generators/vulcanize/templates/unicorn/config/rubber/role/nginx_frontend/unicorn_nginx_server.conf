<%
  @path = "/etc/nginx_frontend/unicorn_nginx_server.conf"

  # For unicorn nodes running on the same host as nginx, we can use unix domain sockets, otherwise fall back to TCP
  unicorn_nodes = rubber_instances.for_role('nginx_frontend')
  self_instance = rubber_instances[rubber_env.host]

  # Instead of pointing to the real release dir, we point to the capistrano symlink (current). This allows us to
  # do hot deploys without restarting nginx.
  deploy_to = "/mnt/#{rubber_env.app_name}-#{RUBBER_ENV}"
-%>

# this can be any application server, not just Unicorn/Rainbows!
upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the Unicorn master nukes a
    # single worker for timing out).

    <% unicorn_nodes.each do |n| %>
      <% if self_instance.full_name == n.full_name %>
        # for UNIX domain socket setups:
        server unix:/tmp/.sock fail_timeout=0;
      <% else %>
        server <%= n.full_name %>:8080 fail_timeout=0;
      <% endif %>
    <% end %>
}

server {
    #listen       80;
    listen 80 default deferred; # for Linux
    client_max_body_size 1G;

    server_name  _;
    root <%= "#{deploy_to}/current/public" %>;

    # If we have Rails-style proxy-busting query string, do internal redirect to special location which adds a far-future expire header.
    # When opening static assets without proxy-busting query string, we do not redirect, and do not set the expire header (for example when referencing images from css files not parsed by rails
    if ($query_string ~* "^[0-9]{10}$") {
      rewrite ^(.*) /add_expires_header$1;
      break;
    }
    location /add_expires_header {
      expires max;
    }

    location / {
      # an HTTP header important enough to have its own Wikipedia entry:
      #   http://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if and only if you use HTTPS, this helps Rack
      # set the proper protocol for doing redirects:
      # proxy_set_header X-Forwarded-Proto https;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # set "proxy_buffering off" *only* for Rainbows! when doing
      # Comet/long-poll stuff.  It's also safe to set if you're
      # using only serving fast clients with Unicorn + nginx.
      # Otherwise you _want_ nginx to buffer responses to slow
      # clients, really.
      # proxy_buffering off;

      # Try to serve static files from nginx, no point in making an
      # *application* server like Unicorn/Rainbows! serve static files.
      if (!-f $request_filename) {
        proxy_pass http://app_server;
        break;
      }
    }

    # TODO: Move this into our app
    location /private/3sellers/ {
      internal;
      alias   <%= deploy_to %>/shared/private/3sellers/;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root <%= deploy_to %>/current/public;
    }
}
